#define WROTE_CS_356_IO 1
//#include <Tiger-stdlib-reg-data.hera>

//Lab 3 part 2 code
//Jordan Acker, Zhanpeng Wang, Kadan Lottick, Elizabeth Chan 

DLABEL(s1)
LP_STRING("Hi")
DSKIP(1)
DLABEL(s2)
LP_STRING("Hello from screen two")


CBON()


//THIS PART PRINTS THE GREETING MESSAGES
SET(r6,2) //counting downward things to be printed
SET(R3, s1) //address of first thing to print
BR(print_loop_greeting) //go print it
LABEL(next_screen) //will get here when ready to print next thing
SET(R3,s2) //address of next thing to print
BR(print_loop_greeting) //go print it
LABEL(print_loop_greeting) //loop thru string to print all of it
LOAD(R1, 1, R3) //Load next char to print
ADD(R0,R1,R0) //set flags
BZ(after_print_greeting) //if next char empty, done printing
MOVE(FP_alt, SP) //prep for call to our function
MOVE(R2, R6) //R2 will represent which screen to print to
DEC(R2, 1) //R2 will be zero for second string, 1 for first string
CALL(FP_alt, myputchar_ord) //call print character function
INC(R3,1) //ready to get next character
BR(print_loop_greeting)

LABEL(after_print_greeting)
DEC(R6,1)
ADD(R0,R6,R0) //set flags
BZ(continue) //done printing things if zero
BR(next_screen) //otherwise print next thing

LABEL(continue)



//THIS PART PROVIDES COMPUTATION ALLOWING USER TO ENTER INPUT

SET(R7, 20) //adjust this value to compute for right amount of time

LABEL(computation)
DEC(R7, 1)
ADD(R0, R7, R0)
BS(aft)
BR(computation)
LABEL(aft)

LABEL(printfrom1)
//THIS PART DOES AN IMMEDIATE GET AND PRINT WITH SCREEN0 CHARS
MOVE(FP_alt, SP)
SET(R2, 1) //get from scr0, it's backwards
CALL(FP_alt, mygetchar_ord)
MOVE(FP_alt, SP)
CALL(FP_alt, myputchar_ord)
CMP(R0, R1)
BZ(no_more_chars)
BR(printfrom1)
LABEL(no_more_chars)



LABEL(printfrom2)
SET(R4, 1000)
SET(R5, 1000)
SET(R3, 2000)
SET(R7, 2000)

LABEL(get_loop)
MOVE(FP_alt, SP)
SET(R2, 0) //get from scr1, it's backwards
CALL(FP_alt, mygetchar_ord)
CMP(R0, R1)
BZ(done_getting)
STORE(R1, 0, R5)


SET(R8, 65)
CMP(R1, R8)
BS(skipcaseswitch)
SET(R8, 90)
CMP(R8, R1)
BS(skipcaseswitch)

SET(R8, 32)
XOR(R1, R1, R8)

LABEL(skipcaseswitch)
STORE(R1, 0, R7)

INC(R5, 1)
INC(R7, 1)
BR(get_loop)
LABEL(done_getting)




LABEL(print_loop) //loop thru string to print all of it
LOAD(R1, 0, R3) //Load next char to print
ADD(R0,R1,R0) //set flags
BZ(after_print) //if next char empty, done printing
MOVE(FP_alt, SP) //prep for call to our function
SET(R2, 0) //print to scr1 
CALL(FP_alt, myputchar_ord) //call print character function
INC(R3,1) //ready to get next character
BR(print_loop)
LABEL(after_print)

LABEL(print_loop2) //loop thru string to print all of it
LOAD(R1, 0, R4) //Load next char to print
ADD(R0,R1,R0) //set flags
BZ(after_print2) //if next char empty, done printing
MOVE(FP_alt, SP) //prep for call to our function
SET(R2, 1) //print to scr0

SET(R8, 48)
CMP(R1, R8)
BS(underscore)
SET(R8, 58)
CMP(R1, R8)
BS(skipunderscore)
SET(R8, 65)
CMP(R1, R8)
BS(underscore)
SET(R8, 91)
CMP(R1, R8)
BS(skipunderscore)
SET(R8, 97)
CMP(R1, R8)
BS(underscore)
SET(R8, 123)
CMP(R1, R8)
BS(skipunderscore)

LABEL(underscore)
SET(R1, 95)
LABEL(skipunderscore)

CALL(FP_alt, myputchar_ord) //call print character function
INC(R4,1) //ready to get next character
BR(print_loop2)
LABEL(after_print2)


LABEL(polling1)
MOVE(FP_alt, SP)
SET(R2, 1) //get from scr0, it's backwards
CALL(FP_alt, mygetchar_ord)
BZ(noprint)
SET(R8, 97)
CMP(R1, R8)
BS(skip1)
SET(R8, 122)
CMP(R8, R1)
BS(skip1)

SET(R8, 32)
XOR(R1, R1, R8)

LABEL(skip1)

MOVE(FP_alt, SP)
CALL(FP_alt, myputchar_ord)

SET(R2, 0)
MOVE(FP_alt, SP)
CALL(FP_alt, myputchar_ord)

LABEL(noprint)
MOVE(FP_alt, SP)
SET(R2, 0) //get from scr1, it's backwards
CALL(FP_alt, mygetchar_ord)
BZ(noprint1)

SET(R8, 65)
CMP(R1, R8)
BS(skip2)
SET(R8, 90)
CMP(R8, R1)
BS(skip2)

SET(R8, 32)
XOR(R1, R1, R8)

LABEL(skip2)

SET(R2, 1)
MOVE(FP_alt, SP)
CALL(FP_alt, myputchar_ord)

SET(R2, 0)
MOVE(FP_alt, SP)
CALL(FP_alt, myputchar_ord)

LABEL(noprint1)

BR(polling1)




BR(end1)
LABEL(myputchar_ord) //print character currently held in r1
INC(SP, 3)
STORE(PC_ret,0,FP)
STORE(FP_alt, 1, FP)
ADD(R0, R2, R0) //set flags for figuring out which screen
BZ(screen1)
LABEL(screen0)
OPCODE(0x2410) // for printing to screen 0
BR(after_screens)
LABEL(screen1)
OPCODE(0x2411) //for printing to screen 1
BR(after_screens)
LABEL(after_screens)
LOAD(PC_ret, 0, FP)
LOAD(FP_alt, 1, FP)
DEC(SP,3)
RETURN(FP_alt, PC_ret)
LABEL(end1)


BR(after_all)
LABEL(mygetchar_ord)
INC(SP, 3)
STORE(PC_ret,0,FP)
STORE(FP_alt, 1, FP)
ADD(R0, R2, R0) //set flags for figuring out which screen
BZ(screen1_get)
LABEL(screen0_get)
OPCODE(0x2510) // for getting from screen 0
BR(after_screens_get)
LABEL(screen1_get)
OPCODE(0x2511) //for getting from screen 1
BR(after_screens_get)
LABEL(after_screens_get)
LOAD(PC_ret, 0, FP)
LOAD(FP_alt, 1, FP)
DEC(SP,3)
RETURN(FP_alt, PC_ret)
LABEL(after_all)


HALT()

//#include <Tiger-stdlib-reg.hera>

