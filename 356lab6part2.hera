

//THIS PART GETS FROM KEYBOARD1 AND PRINTS WHEN IT SEES NEWLINES

LABEL(get_loop)
MOVE(FP_alt, SP)
SET(R2, 1) //get from scr1
CALL(FP_alt, mygetchar_ord) //get character
CMP(R0, R1)
BZ(interrupt_done) //if no more characters and no newline, no printing but keep input in mem
SET(R8, 10) //10 is ASCII for newline, checking if char is one
CMP(R1, R8)
BZ(done_getting) //newline found, stop taking input and go print
STORE(R1, 0, R4) //store unchanged characters for future printing

//increment memory pointers
INC(R4, 1)
BR(get_loop) 

LABEL(done_getting)
//store the newline
STORE(R1, 0, R4)


//PRINTS ALL OF CASE-SWAPPED STRING TO SCREEN1
LABEL(print_loop) 
LOAD(R1, 0, R3) //Load next char to print
SET(R8, 10)
CMP(R8, R1) //set flags
BZ(after_print) //if next char newline, done printing
MOVE(FP_alt, SP) //prep for call to our function
SET(R2, 1) //we want to print to scr1 
CALL(FP_alt, myputchar_ord) //call print character function
INC(R3,1) //ready to get next character
BR(print_loop)
LABEL(after_print)
//print the newline at the end
MOVE(FP_alt, SP)
CALL(FP_alt, myputchar_ord)
SET(R3, 1000)
SET(R4, 1000)

LABEL(interrupt_done)


BR(end1)
LABEL(myputchar_ord) //print character currently held in r1
INC(SP, 3)
STORE(PC_ret,0,FP)
STORE(FP_alt, 1, FP)
ADD(R0, R2, R0) //set flags for figuring out which screen
BZ(screen0)
LABEL(screen1)
OPCODE(0x2411) // for printing to screen 1
BR(after_screens)
LABEL(screen0)
OPCODE(0x2410) //for printing to screen 0
BR(after_screens)
LABEL(after_screens)
LOAD(PC_ret, 0, FP)
LOAD(FP_alt, 1, FP)
DEC(SP,3)
RETURN(FP_alt, PC_ret)
LABEL(end1)


BR(after_all)
LABEL(mygetchar_ord)
INC(SP, 3)
STORE(PC_ret,0,FP)
STORE(FP_alt, 1, FP)
ADD(R0, R2, R0) //set flags for figuring out which screen
BZ(screen0_get)
LABEL(screen1_get)
OPCODE(0x2511) // for getting from screen 1
BR(after_screens_get)
LABEL(screen0_get)
OPCODE(0x2510) //for getting from screen 0
BR(after_screens_get)
LABEL(after_screens_get)
LOAD(PC_ret, 0, FP)
LOAD(FP_alt, 1, FP)
DEC(SP,3)
RETURN(FP_alt, PC_ret)
LABEL(after_all)


HALT()

